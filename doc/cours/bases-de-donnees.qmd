---
title: "Bases de Données"
description: "[Slides](bases-de-donnees-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Bases de Données](bases-de-donnees.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: bases-de-donnees-slides.html
mermaid:
  theme: forest
code-line-numbers: false
from: markdown+emoji
---

## Une donnée ?

::: {.fragment}
- texte (nom, prénom, ville...)
- numérique (age, prix...)
- date
- liste (compétences, loisirs)
- image
- fichier
:::

---

::: {.callout-note title="Définition"}
Une **donnée** est une information brute qui possède :

- un type
- une valeur
:::


## Une base de données ?

:::::: incremental
::: {.callout-note title="Définition"}
Une **base de données** est un ensemble de données rassemblées et stockées de manière organisée dans un but spécifique.
:::
::::::

:::{.notes}
Types ?

On n'utilise pas la même structure pour du texte ou des fichiers.
:::

## Enjeux

- Accès aux données : langage SQL
- Sécurité des données : seuls les utilisateurs autorisés (droits)
- Partage des données : facile en lecture, mais en écriture ?
- Non-redondance des données
- Cohérence des données : respect des contraintes d'intégrité

## Types de bases de données

### Hiérarchique

- Données organisées comme un arbre 
- Relations de type parent-enfant
- Annuaires LDAP, système de fichiers

```{mermaid}
stateDiagram 
    ENSAI --> Permanent
    ENSAI --> Eleve
    Permanent --> Enseignant
    Permanent --> Administratif
    Eleve --> 1A
    Eleve --> 2A
    Eleve --> 3A
```

### Réseau

- Organisée en graphe
- Les enregistrements peuvent avoir plusieurs parents et enfants
- Réseaux de transports
  

### Relationnelle

- Organisée en tables
- Lien entre les tables

### NoSQL

Nombreux sous-types :

- **Clé-valeur** : données sous forme de paires clé-valeur (DynamoDB)
- **Colonnes** : Organisée en colonnes, adaptée aux grandes quantités de données (Cassandra)
- **Document** : Stocke des documents semi-structurés (JSON, XML) (MongoDB)
- **Graphes** : Organisée sous forme de nœuds et de relations, pour des données très connectées (Neo4j)

:::{.notes}
Not Only SQL
:::

### Autres

- Bases de données de séries temporelles

## Base de données relationnelle

### Table

- Composée de lignes et de colonnes
- Chaque table représente une entité
- Chaque [ligne]{.underline} est un enregistrement
- Chaque [colonne]{.underline} représente un attribut de l'entité
- Types de données : texte, num...


### Relations entre les tables

- [**Clé primaire**]{.underline} (PK) pour identifier chaque enregistrement dans une table
  - de manière unique
  - sans ambiguïté
- [**Clé étrangère**]{.underline} (FK) pour créer des liens avec d'autres tables
  - attribut d'une table A
  - correspond à la clé primaire d'une table B


### Exemple

Comment relier ces 2 tables ?

- une joueuse joue pour un seul club
- Un club peut avoir plusieurs joueuses

```{mermaid}
classDiagram
    class Joueuse {
        id_joueuse PK
        nom
        prenom
        elo
    }
    
    class Club {
        id_club PK
        nom
        ville
    }
```

---

| **id_joueuse** | **nom**                | **prenom**       | **elo** |
|----------------|------------------------|------------------|---------|
| 1              | Guichard               | Pauline          | 2357    |
| 2              | Daulyte-Cornette       | Deimante         | 2371    |
| 3              | Navrotescu             | Andreea          | 2338    |
| 4              | Sebag                  | Marie            | 2448    |
| 5              | Millet                 | Sophie           | 2366    |
| 6              | Skrichempko            | Almira           | 2361    |

: joueuse

---

| **id_club**  | **nom**                          | **ville**            |
|--------------|----------------------------------|----------------------|
| 1            | C'Chartres Echecs                | Chartres             |
| 2            | Bischwiller                      | Bischwiller          |
| 3            | Asnieres - le Grand Echiquier    | Asnieres             |
| 4            | Tours des Hauts-De-France        | Saint-Quentin        |

: club {tbl-colwidths="[15,55,30]"}

### Clé étrangère

En ajoutant une clé étrangère.

```{mermaid}
classDiagram
    class joueuse {
        id_joueuse PK
        nom
        prenom
        elo
        id_club FK
    }
    
    class Club {
        id_club PK
        nom
        ville
    }
```



---

| **id_joueuse** | **nom**                | **prenom**       | **elo** | **id_club**  |
|----------------|------------------------|------------------|---------|--------------|
| 1              | Guichard               | Pauline          | 2357    | 3            |
| 2              | Daulyte                | Deimante         | 2371    | 1            | 
| 3              | Navrotescu             | Andreea          | 2338    | 2            |
| 4              | Sebag                  | Marie            | 2448    | 2            |
| 5              | Millet                 | Sophie           | 2366    | 3            |
| 6              | Skrichempko            | Almira           | 2361    | 2            |

: joueuse

### Clé primaire

- Attribut (ou ensemble d'attributs)
- Unique
- Non nulle
- Immuable

::: {.callout-tip}
Sauf mention contraire, nous utiliserons une clé primaire "technique" : séquence.
:::

:::{.notes}
Immuable : 

- idéalement stable, elle ne change pas au cours du temps
- Pour maintenir l'intégrité des liens avec d'autres tables

Remarque : pas obligatoire d'avoir une clé primaire
:::

### Question

Si une joueuse peut adhérer à plusieurs clubs ? :confused:

::: {.notes}
Par exemple si notre bdd contient aussi les clubs belges, allemands, espagnols...
:::

### Table d'association

Création d'une table d'association : **adhesion** :sweat_smile:

```{mermaid}
classDiagram
    class Adhesion {
        id_joueuse FK
        id_club FK
    }
```

---

| **id_club**  | **id_joueuse** |
|--------------|----------------|
| 1            | 2              |
| 2            | 3              |
| 2            | 4              |
| 2            | 6              |
| 3            | 1              |
| 3            | 5              |
| 4            | 1              |
| 4            | 2              |

: adhesion

::: {.notes}
Clé primaire ?

- id_adhesion
- (id_club, id_joueuse)
:::


## Associations

Il existe plusieurs types d'associations entre tables.

### Association 1:1

Une entité dans la table A est associée à une seule entité dans la table B.

Exemple :

- Une personne a une seule carte vitale
- Une carte vitale appartient à une seule personne

:::{.notes}
on aurait pu tout mettre dans la même table
:::

### Association 1:n

Une entité dans la table A peut-être associée à plusieurs entités dans la table B.

Exemple :

- Un club est composé de plusieurs joueuses
- Une joueuse adhère à un seul club

### Association n:n

Une entité dans la table A peut-être associée à plusieurs entités dans la table B.

Et inversement, une entité dans la table B peut-être associée à plusieurs entités dans la table A.

Exemple :

- une joueuse participe à plusieurs tournois
- Un tournoi regroupe plusieurs joueuses


### Association récursive

Une table peut avoir des relations avec elle-même

Ici la table contient une clé étrangère qui référence sa propre clé primaire.

Exemple :

- Un employé a un supérieur








### Exemple

Site de vente de légumes

- Client
  - id_client
  - nom
  - prenom
  - mail
- Produit
  - id_produit
  - nom
  - description
  - prix
- Commande
  - id_commande
  - id_client
- LigneCommande
  - id_ligne_commande
  - id_commande
  - id_produit
  - quantite


