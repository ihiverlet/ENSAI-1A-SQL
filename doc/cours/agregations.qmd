---
title: "Agrégations"
description: "[Slides](agregations-slides.html)"
author: "Ludovic Deneuville"
format: 
  html:
    toc: true
    toc-location: left
    toc-depth: 3
    number-sections: true
    number-depth: 2
  revealjs:
    theme: moon
    footer: "[Home](../../index.html) --- [Agrégations](agregations.html)"
    slide-number: c/t                    # collapsed/total
    slide-level: 3
    controls: true
    output-file: agregations-slides.html
mermaid:
  theme: forest
code-line-numbers: false
from: markdown+emoji
---

## Données utilisées

::: {.small-table}
| **id_joueuse** | **nom**                | **prenom**       | **elo** | **ville_club** |
|----------------|------------------------|------------------|---------|----------------|
| 1              | Guichard               | Pauline          | 2357    | Asnieres       |
| 2              | Daulyte                | Deimante         | 2371    | Chartres       | 
| 3              | Navrotescu             | Andreea          | 2338    | Asnieres       |
| 4              | Sebag                  | Marie            | 2448    | Bischwiller    |
| 5              | Millet                 | Sophie           | 2366    | Asnieres       |
| 6              | Skrichempko            | Almira           | 2361    | Bischwiller    |
:::

::: {.notes}
j'ai intégré ici le club pour faciliter les choses
:::

## Questions

Quelques questions que l'on peut se poser :

::: {.incremental}
- Quel est le id_joueuse maximum ?
- Quel est le nombre de joueuses ?
- Quelle est la moyenne elo par club ?
:::

## Compter les lignes

```{.sql}
SELECT COUNT(*)
  FROM echecs.joueuse
 WHERE elo < 2400;
```

::: {.small-table}
| **count** |
|-----------|
| 5         |
:::

<br>

```{.sql}
SELECT COUNT(DISTINCT prenom)
  FROM echecs.joueuse;
```

::: {.small-table}
| **count** |
|-----------|
| 6         |
:::

::: {.notes}
J'utilise souvent COUNT(1) -> c'est pareil
:::

### Compter avec un filtre

L'opérateur `FILTER` permet de calculer une agrégation conditionnelle. 

```{.sql}
SELECT COUNT(*) FILTER (WHERE elo BETWEEN 2300 AND 2399) AS niv_fm,
       COUNT(*) FILTER (WHERE elo BETWEEN 2400 AND 2499) AS niv_im
  FROM echecs.joueuse;
```

::: {.small-table}
| **niv_fm** | **niv_im** |
|------------|------------|
| 5          | 1          |
:::

## Somme

```{.sql}
SELECT SUM(elo)
  FROM echecs.joueuse;
```

::: {.small-table}
| **sum**     |
|-------------|
| 14223       |
:::

::: {.notes}
```{.sql}
SELECT SUM(elo) / COUNT(elo)
  FROM echecs.joueuse;
```

:::

## Stats descriptives

```{.sql}
SELECT MAX(elo),
       MIN(elo),
       AVG(elo)
  FROM echecs.joueuse;
```

::: {.small-table}
| **max**     | **min**     | **avg**     |
|-------------|-------------|-------------|
| 2448        | 2338        | 2373.5      |
:::

::: {.callout-tip}
Vous pouvez également calculer : `VARIANCE`, `STDDEV`.
:::


::: {.fragment}
Comment afficher la joueuse avec le plus grand elo ? :dizzy_face:
:::


### Sous-requête

En utilisant une **sous-requête** :

- `SELECT MAX(elo) FROM echecs.joueuse` :arrow_right: renvoie un nombre
- Nous pouvons ensuite tester si *elo* est égal à ce nombre

::: {.fragment}
```{.sql}
SELECT nom,
       prenom,
       elo
  FROM echecs.joueuse
 WHERE elo = (SELECT MAX(elo) FROM echecs.joueuse);
```
:::

## Regroupement

Comment obtenir la moyenne elo par club ?

:::::: {.fragment}

```{.sql}
SELECT ville_club,    -- Supposons que la table joueuse a un attribut ville_club
       AVG(elo)
  FROM echecs.joueuse
 GROUP BY ville_club;
```

::: {.small-table}
| **ville_club**   | **avg_elo** |
|------------------|-------------|
| Asnieres         | 2372.4      |
| Chartres         | 2371.0      |
| Bischwiller      | 2404.5      |

:::
::::::

::: {.notes}
J'ai mis ville_club car id_club c'est moins joli et on verra les jointures ensuite.

Vous pouvez utiliser ROUND() pour arrondir.
:::

### Colonnes du GROUP BY

Vous pouvez grouper en utilisant plusieurs colonnes.

::: {.callout-important}
Les colonnes présentes dans le *SELECT* doivent impérativement être présentes dans le *GROUP BY*.

L'inverse n'est pas vrai. Vous pouvez avoir des colonnes du *GROUP BY* que vous n'affichez pas dans le *SELECT*.
:::

::: {.notes}
je dis bien colonnes et pas fonctions d'aggrégation
:::


### Filtrer suite au GROUP BY

Comment faire pour afficher uniquement les clubs où la moyenne élo est inférieure à 2400 ?

:::::: {.fragment}

```{.sql}
SELECT ville_club,
       AVG(elo)
  FROM echecs.joueuse
 GROUP BY ville_club
HAVING AVG(elo) < 2400;
```

<br>

::: {.small-table}
| **club**         | **avg_elo** |
|------------------|-------------|
| Asnieres         | 2372.4      |
| Chartres         | 2371.0      |

:::
::::::

### Having Vs Where

- **WHERE** - Filtre Avant l'Agrégation
- **HAVING** - Filtre Après l'Agrégation